<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!--开启spring注解扫描-->
    <context:component-scan base-package="com.my.iot">
        <!--不扫描Controller-->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--Spring 整合 MyBatis-->
    <!--加载properties文件-->
    <context:property-placeholder ignore-unresolvable="true" location="classpath:druid.properties"/>
    <!--配置druid连接池-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="initialSize" value="${druid.initialSize}"/>
        <property name="maxActive" value="${druid.maxActive}"/>
        <property name="maxWait" value="${druid.maxWait}"/>
    </bean>

    <!--配置SqlSessionFactoryBean-->
    <bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!--配置加载mapper.xml映射文件-->
        <!--        <property name="mapperLocations" value="classpath:com/blackhorse/travel/dao/*Dao.xml"/>-->
    </bean>

    <!--配置mybatis的dao包扫描，扫描后创建的mapper代理对象会存入IOC容器-->
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.my.iot.mapper"/>
    </bean>

    <!--spring 整合 redis-->
    <bean id="annotationPropertyConfigurerRedis"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="order" value="1"/>
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
        <property name="locations">
            <list>
                <value>classpath:redis.properties</value>
            </list>
        </property>
    </bean>
    <!-- redis数据源配置对象 -->
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.maxIdle}"/> <!-- 最大空闲数 -->
        <property name="maxTotal" value="${redis.maxTotal}"/> <!-- 最大空连接数 -->
        <property name="maxWaitMillis" value="${redis.maxWaitMillis}"/><!-- 最大等待时间 -->
        <property name="testOnBorrow" value="${redis.testOnBorrow}"/><!-- 返回连接时，检测连接是否成功 -->
    </bean>
    <!-- Spring-redis连接池管理工厂 -->
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="${redis.host}"/> <!-- IP地址 -->
        <property name="port" value="${redis.port}"/> <!-- 端口号 -->
        <!--        <property name="password" value="${redis.password}" />-->
        <property name="timeout" value="${redis.timeout}"/> <!-- 超时时间 默认2000-->
        <property name="poolConfig" ref="poolConfig"/>  <!-- 连接池配置引用 -->
        <property name="usePool" value="true"/> <!-- usePool：是否使用连接池 -->
    </bean>
    <!-- 定义 redis template -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory"/>
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
        </property>
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="hashValueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
        </property>
        <property name="enableTransactionSupport" value="true"/> <!--开启事务  -->
    </bean>

    <!--Spring声明式事务配置-->
    <!--配置事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--配置事务通知-->
    <!--    <tx:advice id="txAdvice" transaction-manager="transactionManager">-->
    <!--        <tx:attributes>-->
    <!--            <tx:method name="find*" read-only="true"/>-->
    <!--            <tx:method name="*" propagation="REQUIRED" read-only="false"/>-->
    <!--        </tx:attributes>-->
    <!--    </tx:advice>-->

    <!--配置AOP事务增强-->
    <!--    <aop:config>-->
    <!--        <aop:advisor advice-ref="txAdvice" pointcut="execution(* com.blackhorse.travel.service.impl.*.*(..))"/>-->
    <!--    </aop:config>-->

    <!--开启spring对注解事务的支持-->
    <tx:annotation-driven transaction-manager="transactionManager"/>
</beans>